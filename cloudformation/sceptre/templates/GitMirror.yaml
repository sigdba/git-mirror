---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC into which the function will be deployed

  SubnetId:
    Type: String
    Description: Subnet for EFS access

  JarBucket:
    Type: String
    Description: Name of the S3 bucket containing the function jar file

  JarPath:
    Type: String
    Description: Path to the jar file within the S3 bucket

  PrivateKeyParam:
    Type: String
    Description: Name of the SSM parameter containing the SSH private key

  MirrorConfParam:
    Type: String
    Description: Name of the SSM parameter containing the git-mirror configuration in EDN

  CodeCommitCredsParam:
    Type: String
    Description: Name of the SSM parameter containing the HTTPS credentials for CodeCommit
    Default: "git-mirror-code-commit-creds"

  ParamKey:
    Type: String
    Description: Name of the KMS key needed to decrypt parameters
    Default: "key/CMK"

  ScheduleExpr:
    Type: String
    Description: cron or rate expression for scheduled execution
    Default: "rate(1 day)"

  EfsMountPoint:
    Type: String
    Description: Path where the EFS volume will be mounted in the Lambda environment
    Default: /mnt/cache

  EfsBaseDir:
    Type: String
    Description: Path within EFS volume which will be the base of all GitMirror files.
    Default: /git_mirror

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - EfsMountTarget
    Properties:
      Code:
        S3Bucket: !Ref JarBucket
        S3Key: !Ref JarPath
      Handler: git_mirror.aws.lambda_handler::handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java8
      MemorySize: 1024
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetId
      FileSystemConfigs:
        - Arn: !GetAtt EfsAccessPoint.Arn
          LocalMountPath: !Ref EfsMountPoint
      Environment:
        Variables:
          GITMIRROR_SOURCE_PRIVKEY_SSM_PARAM: !Ref PrivateKeyParam
          GITMIRROR_CONF_SSM_PARAM: !Ref MirrorConfParam
          GITMIRROR_CACHE_DIR: !Sub "${EfsMountPoint}/cache"
          XDG_CONFIG_HOME: !Sub "${EfsMountPoint}/.xdg_config"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource: !GetAtt EfsFileSystem.Arn
              - Effect: Allow
                Action:
                  - codecommit:GetRepository
                  - codecommit:CreateRepository
                  - codecommit:TagResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: !GetAtt SqsQueue.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${ParamKey}"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PrivateKeyParam}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${MirrorConfParam}"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CodeCommitCredsParam}"

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: "Git Mirror Lambda SG"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  SqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 1

  SqsEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt SqsQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20

  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose

  EfsAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EfsFileSystem
      PosixUser:
        Gid: 1000
        Uid: 1000
      RootDirectory:
        Path: !Ref EfsBaseDir
        CreationInfo:
          OwnerGid: 1000
          OwnerUid: 1000
          Permissions: 777

  EfsMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref SubnetId
      SecurityGroups:
        - !Ref EfsSecurityGroup

  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: "GitMirror mount target SG"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  EbRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref ScheduleExpr
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: LambdaTarget
          Input: !Sub |
            {
              "op": "queue-for-mirror",
              "queue-arn": "${SqsQueue.Arn}"
            }
